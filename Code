{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DS402_Project3_Solutions.ipynb","provenance":[{"file_id":"1LPMMwC88CI3YHKQEuc8TdkYeFNV31NRi","timestamp":1619575148694},{"file_id":"1JH7NzcXlx4-zWUM6JDWcsynsLGnAz5Ev","timestamp":1619121761196}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"eef985db2696402d87e8a9f36daaa6f4":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_0943196c9d104cf98ba527ba86be49be","IPY_MODEL_c5bd01cc76b14511b85efb6bd579505c","IPY_MODEL_08dcce2c92534b1085833268b00236ab"],"layout":"IPY_MODEL_d5376d70e50b4eabaacdbd41f0ab038f"}},"0943196c9d104cf98ba527ba86be49be":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d992f39c70e04f8385c30234acdcd817","placeholder":"​","style":"IPY_MODEL_1bc75334850f4f0d8f2a93e3b5ef9824","value":"100%"}},"c5bd01cc76b14511b85efb6bd579505c":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_b9672537c41f457bafb33301ae464c6c","max":241627721,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e20f9667e5bd48459deb4f36549f28b4","value":241627721}},"08dcce2c92534b1085833268b00236ab":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d65788fb14a64eb99b2752e9498f4edf","placeholder":"​","style":"IPY_MODEL_c2502975ad3c483b824e0b5269b74e3c","value":" 230M/230M [00:03&lt;00:00, 74.3MB/s]"}},"d5376d70e50b4eabaacdbd41f0ab038f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d992f39c70e04f8385c30234acdcd817":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1bc75334850f4f0d8f2a93e3b5ef9824":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b9672537c41f457bafb33301ae464c6c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e20f9667e5bd48459deb4f36549f28b4":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"d65788fb14a64eb99b2752e9498f4edf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c2502975ad3c483b824e0b5269b74e3c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","metadata":{"id":"qKZs4IpBlhlx"},"source":["Madical Image Classification using Transfer Learning"]},{"cell_type":"code","metadata":{"id":"IMS4bOEHL4wA"},"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","\n","!unzip /content/drive/MyDrive/train.zip\n","!unzip /content/drive/MyDrive/test.zip"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s3DZNNB2KD5H","executionInfo":{"status":"ok","timestamp":1654557398986,"user_tz":240,"elapsed":1437,"user":{"displayName":"Yaowen Tan","userId":"13712115941236120410"}}},"source":["import os\n","import shutil\n","import re\n","\n","os.makedirs(\"val/normal\")\n","os.makedirs(\"val/virus\")\n","os.makedirs(\"val/bacteria\")\n","\n","normal_val = \"val/normal/\"\n","virus_val = \"val/virus/\"\n","bacteria_val = \"val/bacteria/\"\n","\n","!bash -c 'ls -Q train/bacteria | head -100 | xargs -i mv train/bacteria/{} val/bacteria/'\n","!bash -c 'ls -Q train/virus | head -100 | xargs -i mv train/virus/{} val/virus/'\n","!bash -c 'ls -Q train/normal | head -100 | xargs -i mv train/normal/{} val/normal/'"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"yEyvLOA0EpQ5","executionInfo":{"status":"ok","timestamp":1654557406259,"user_tz":240,"elapsed":1955,"user":{"displayName":"Yaowen Tan","userId":"13712115941236120410"}}},"source":["# in order to use data loader, we can create 'fake' labels for testing data\n","\n","os.makedirs(\"test/normal\")\n","os.makedirs(\"test/virus\")\n","os.makedirs(\"test/bacteria\")\n","\n","normal_test = \"test/normal/\"\n","virus_test = \"test/virus/\"\n","bacteria_test = \"test/bacteria/\"\n","\n","!bash -c 'find test -name *g | head -n 200 | xargs -I {} mv {} test/bacteria'\n","!bash -c 'find test -name *g | head -n 200 | xargs -I {} mv {} test/virus'\n","!bash -c 'mv test/*g test/normal/'"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ccayvf4xLOPi","executionInfo":{"status":"ok","timestamp":1654557411013,"user_tz":240,"elapsed":2423,"user":{"displayName":"Yaowen Tan","userId":"13712115941236120410"}}},"source":["from __future__ import print_function, division\n","\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.optim import lr_scheduler\n","import torchvision\n","from torchvision import datasets, models, transforms\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import time\n","import os\n","import copy"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"fjspOZFNLUVT","executionInfo":{"status":"ok","timestamp":1654557415981,"user_tz":240,"elapsed":335,"user":{"displayName":"Yaowen Tan","userId":"13712115941236120410"}}},"source":["# Make transforms and use data loaders\n","\n","# We'll use these a lot, so make them variables\n","mean_nums = [0.485, 0.456, 0.406]\n","std_nums = [0.229, 0.224, 0.225]\n","\n","chosen_transforms = {'train': transforms.Compose([\n","        transforms.RandomResizedCrop(size=256),\n","        transforms.RandomRotation(degrees=15),\n","        transforms.RandomHorizontalFlip(),\n","        transforms.ToTensor(),\n","        transforms.Normalize(mean_nums, std_nums)\n","]), 'val': transforms.Compose([\n","        transforms.Resize(256),\n","        transforms.CenterCrop(224),\n","        transforms.ToTensor(),\n","        transforms.Normalize(mean_nums, std_nums)\n","]), 'test': transforms.Compose([\n","        transforms.Resize(256),\n","        transforms.CenterCrop(224),\n","        transforms.ToTensor(),\n","        transforms.Normalize(mean_nums, std_nums)\n","])\n","}"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"qv7i0ZpvCTzV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654557420157,"user_tz":240,"elapsed":775,"user":{"displayName":"Yaowen Tan","userId":"13712115941236120410"}},"outputId":"93b648f7-28ae-4045-e115-2caef8286fbb"},"source":["import torch\n","from torchvision import *\n","\n","# Get the paths of the corresponding images\n","class ImageFolderWithPaths(torchvision.datasets.ImageFolder):    \n","    def __getitem__(self, index):\n","        original_tuple = super(ImageFolderWithPaths, self).__getitem__(index)\n","        path = self.imgs[index][0]\n","        tuple_with_path = (original_tuple + (path,))\n","        return tuple_with_path\n","\n","# Set the directory for the data\n","data_dir = ''\n","\n","# Use the image folder function to create datasets\n","chosen_datasets = {x: ImageFolderWithPaths(os.path.join(data_dir, x),\n","  chosen_transforms[x])\n","                  for x in ['train', 'val', 'test']}\n","\n","# Make iterables with the dataloaders\n","dataloaders = {x: torch.utils.data.DataLoader(chosen_datasets[x], batch_size=4,\n","  shuffle=True, num_workers=4)\n","              for x in ['train', 'val']}\n","\n","# For testing data\n","dataloader_test = {x: torch.utils.data.DataLoader(chosen_datasets[x], batch_size=1,\n","  shuffle=False, num_workers=4)\n","              for x in ['test']}"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:490: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  cpuset_checked))\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-BK8GGXxR51Z","executionInfo":{"status":"ok","timestamp":1654557422842,"user_tz":240,"elapsed":3,"user":{"displayName":"Yaowen Tan","userId":"13712115941236120410"}},"outputId":"c4c71615-14fc-4bac-df8f-3eb12a12056a"},"source":["dataset_sizes = {x: len(chosen_datasets[x]) for x in ['train', 'val', 'test']}\n","class_names = chosen_datasets['train'].classes\n","print(class_names)\n","\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["['bacteria', 'normal', 'virus']\n"]}]},{"cell_type":"code","metadata":{"id":"6kPn1wjZSRFH","colab":{"base_uri":"https://localhost:8080/","height":66,"referenced_widgets":["eef985db2696402d87e8a9f36daaa6f4","0943196c9d104cf98ba527ba86be49be","c5bd01cc76b14511b85efb6bd579505c","08dcce2c92534b1085833268b00236ab","d5376d70e50b4eabaacdbd41f0ab038f","d992f39c70e04f8385c30234acdcd817","1bc75334850f4f0d8f2a93e3b5ef9824","b9672537c41f457bafb33301ae464c6c","e20f9667e5bd48459deb4f36549f28b4","d65788fb14a64eb99b2752e9498f4edf","c2502975ad3c483b824e0b5269b74e3c"]},"executionInfo":{"status":"ok","timestamp":1654557432740,"user_tz":240,"elapsed":5093,"user":{"displayName":"Yaowen Tan","userId":"13712115941236120410"}},"outputId":"bc0b3647-0357-4447-cccc-059e5eba1c7e"},"source":["# Setting up the model\n","# load in pretrained and reset final fully connected\n","\n","res_mod = models.resnet152(pretrained=True)\n","\n","num_ftrs = res_mod.fc.in_features\n","res_mod.fc = nn.Linear(num_ftrs, 3)"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["Downloading: \"https://download.pytorch.org/models/resnet152-394f9c45.pth\" to /root/.cache/torch/hub/checkpoints/resnet152-394f9c45.pth\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0.00/230M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"eef985db2696402d87e8a9f36daaa6f4"}},"metadata":{}}]},{"cell_type":"code","metadata":{"id":"-KYDZxtdke_E","executionInfo":{"status":"ok","timestamp":1654557446104,"user_tz":240,"elapsed":11061,"user":{"displayName":"Yaowen Tan","userId":"13712115941236120410"}}},"source":["res_mod = res_mod.to(device)\n","criterion = nn.CrossEntropyLoss()\n","\n","# Observe that all parameters are being optimized\n","optimizer_ft = optim.SGD(res_mod.parameters(), lr=0.001, momentum=0.9)\n","\n","# Decay LR by a factor of 0.1 every 7 epochs\n","exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"38Xo7nOdkixN","executionInfo":{"status":"ok","timestamp":1654557450353,"user_tz":240,"elapsed":1036,"user":{"displayName":"Yaowen Tan","userId":"13712115941236120410"}}},"source":["def train_model(model, criterion, optimizer, scheduler, num_epochs=10):\n","    since = time.time()\n","\n","    best_model_wts = copy.deepcopy(model.state_dict())\n","    best_acc = 0.0\n","\n","    for epoch in range(num_epochs):\n","        print('Epoch {}/{}'.format(epoch, num_epochs - 1))\n","        print('-' * 10)\n","\n","        # Each epoch has a training and validation phase\n","        for phase in ['train', 'val']:\n","            if phase == 'train':\n","                scheduler.step()\n","                model.train()  # Set model to training mode\n","            else:\n","                model.eval()   # Set model to evaluate mode\n","\n","            current_loss = 0.0\n","            current_corrects = 0\n","\n","            # Here's where the training happens\n","            print('Iterating through data...')\n","\n","            for inputs, labels, paths in dataloaders[phase]:\n","                inputs = inputs.to(device)\n","                labels = labels.to(device)\n","\n","                # We need to zero the gradients, don't forget it\n","                optimizer.zero_grad()\n","\n","                # Time to carry out the forward training poss\n","                # We only need to log the loss stats if we are in training phase\n","                with torch.set_grad_enabled(phase == 'train'):\n","                    outputs = model(inputs)\n","                    _, preds = torch.max(outputs, 1)\n","                    loss = criterion(outputs, labels)\n","\n","                    # backward + optimize only if in training phase\n","                    if phase == 'train':\n","                        loss.backward()\n","                        optimizer.step()\n","\n","                # We want variables to hold the loss statistics\n","                current_loss += loss.item() * inputs.size(0)\n","                current_corrects += torch.sum(preds == labels.data)\n","\n","            epoch_loss = current_loss / dataset_sizes[phase]\n","            epoch_acc = current_corrects.double() / dataset_sizes[phase]\n","\n","            print('{} Loss: {:.4f} Acc: {:.4f}'.format(\n","                phase, epoch_loss, epoch_acc))\n","\n","            # Make a copy of the model if the accuracy on the validation set has improved\n","            if phase == 'val' and epoch_acc > best_acc:\n","                best_acc = epoch_acc\n","                best_model_wts = copy.deepcopy(model.state_dict())\n","\n","        print()\n","\n","    time_since = time.time() - since\n","    print('Training complete in {:.0f}m {:.0f}s'.format(\n","        time_since // 60, time_since % 60))\n","    print('Best val Acc: {:4f}'.format(best_acc))\n","\n","    # Now we'll load in the best model weights and return it\n","    model.load_state_dict(best_model_wts)\n","    return model"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"Xlkn6ZAvkvwo","colab":{"base_uri":"https://localhost:8080/"},"outputId":"f06f2f70-b860-493c-97c7-530ef0189007","executionInfo":{"status":"ok","timestamp":1654559172258,"user_tz":240,"elapsed":1717062,"user":{"displayName":"Yaowen Tan","userId":"13712115941236120410"}}},"source":["base_model = train_model(res_mod, criterion, optimizer_ft, exp_lr_scheduler, num_epochs=25)"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 0/24\n","----------\n","Iterating through data...\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch/optim/lr_scheduler.py:136: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate\n","  \"https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate\", UserWarning)\n","/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:490: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  cpuset_checked))\n"]},{"output_type":"stream","name":"stdout","text":["train Loss: 1.0850 Acc: 0.5146\n","Iterating through data...\n","val Loss: 1.2347 Acc: 0.5900\n","\n","Epoch 1/24\n","----------\n","Iterating through data...\n","train Loss: 0.9131 Acc: 0.5666\n","Iterating through data...\n","val Loss: 0.8928 Acc: 0.6233\n","\n","Epoch 2/24\n","----------\n","Iterating through data...\n","train Loss: 0.8543 Acc: 0.5871\n","Iterating through data...\n","val Loss: 0.8079 Acc: 0.6733\n","\n","Epoch 3/24\n","----------\n","Iterating through data...\n","train Loss: 0.8214 Acc: 0.6142\n","Iterating through data...\n","val Loss: 0.8811 Acc: 0.6467\n","\n","Epoch 4/24\n","----------\n","Iterating through data...\n","train Loss: 0.7918 Acc: 0.6259\n","Iterating through data...\n","val Loss: 0.9618 Acc: 0.6067\n","\n","Epoch 5/24\n","----------\n","Iterating through data...\n","train Loss: 0.7550 Acc: 0.6398\n","Iterating through data...\n","val Loss: 0.7951 Acc: 0.6733\n","\n","Epoch 6/24\n","----------\n","Iterating through data...\n","train Loss: 0.6982 Acc: 0.6735\n","Iterating through data...\n","val Loss: 0.7121 Acc: 0.6933\n","\n","Epoch 7/24\n","----------\n","Iterating through data...\n","train Loss: 0.6697 Acc: 0.6947\n","Iterating through data...\n","val Loss: 0.8330 Acc: 0.6700\n","\n","Epoch 8/24\n","----------\n","Iterating through data...\n","train Loss: 0.6651 Acc: 0.6845\n","Iterating through data...\n","val Loss: 0.7179 Acc: 0.6900\n","\n","Epoch 9/24\n","----------\n","Iterating through data...\n","train Loss: 0.6414 Acc: 0.6999\n","Iterating through data...\n","val Loss: 0.7658 Acc: 0.6867\n","\n","Epoch 10/24\n","----------\n","Iterating through data...\n","train Loss: 0.6778 Acc: 0.6874\n","Iterating through data...\n","val Loss: 0.6202 Acc: 0.7133\n","\n","Epoch 11/24\n","----------\n","Iterating through data...\n","train Loss: 0.6506 Acc: 0.7064\n","Iterating through data...\n","val Loss: 0.6864 Acc: 0.6967\n","\n","Epoch 12/24\n","----------\n","Iterating through data...\n","train Loss: 0.6241 Acc: 0.7094\n","Iterating through data...\n","val Loss: 0.7902 Acc: 0.6767\n","\n","Epoch 13/24\n","----------\n","Iterating through data...\n","train Loss: 0.6386 Acc: 0.6999\n","Iterating through data...\n","val Loss: 0.7169 Acc: 0.6933\n","\n","Epoch 14/24\n","----------\n","Iterating through data...\n","train Loss: 0.5969 Acc: 0.7167\n","Iterating through data...\n","val Loss: 0.6803 Acc: 0.7067\n","\n","Epoch 15/24\n","----------\n","Iterating through data...\n","train Loss: 0.6375 Acc: 0.7116\n","Iterating through data...\n","val Loss: 0.7391 Acc: 0.6833\n","\n","Epoch 16/24\n","----------\n","Iterating through data...\n","train Loss: 0.6287 Acc: 0.7123\n","Iterating through data...\n","val Loss: 0.7236 Acc: 0.6933\n","\n","Epoch 17/24\n","----------\n","Iterating through data...\n","train Loss: 0.6314 Acc: 0.7028\n","Iterating through data...\n","val Loss: 0.6392 Acc: 0.7033\n","\n","Epoch 18/24\n","----------\n","Iterating through data...\n","train Loss: 0.6339 Acc: 0.7240\n","Iterating through data...\n","val Loss: 0.6996 Acc: 0.6900\n","\n","Epoch 19/24\n","----------\n","Iterating through data...\n","train Loss: 0.6311 Acc: 0.7050\n","Iterating through data...\n","val Loss: 0.6572 Acc: 0.7133\n","\n","Epoch 20/24\n","----------\n","Iterating through data...\n","train Loss: 0.6085 Acc: 0.7189\n","Iterating through data...\n","val Loss: 0.6415 Acc: 0.7000\n","\n","Epoch 21/24\n","----------\n","Iterating through data...\n","train Loss: 0.6134 Acc: 0.7379\n","Iterating through data...\n","val Loss: 0.6624 Acc: 0.7000\n","\n","Epoch 22/24\n","----------\n","Iterating through data...\n","train Loss: 0.6095 Acc: 0.7116\n","Iterating through data...\n","val Loss: 0.6954 Acc: 0.6967\n","\n","Epoch 23/24\n","----------\n","Iterating through data...\n","train Loss: 0.6560 Acc: 0.7050\n","Iterating through data...\n","val Loss: 0.6998 Acc: 0.6967\n","\n","Epoch 24/24\n","----------\n","Iterating through data...\n","train Loss: 0.6195 Acc: 0.7255\n","Iterating through data...\n","val Loss: 0.6741 Acc: 0.6933\n","\n","Training complete in 28m 38s\n","Best val Acc: 0.713333\n"]}]},{"cell_type":"code","metadata":{"id":"ZQAKYlDZT9Qp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1654559730262,"user_tz":240,"elapsed":24837,"user":{"displayName":"Yaowen Tan","userId":"13712115941236120410"}},"outputId":"2701b9ec-34d4-470f-d6e1-06d18e410241"},"source":["predlist=torch.zeros(0,dtype=torch.long, device='cpu')\n","\n","pathlist = [] # testing data path\n","\n","with torch.no_grad():\n","    for inputs, classes, paths in dataloader_test['test']:\n","        inputs = inputs.to(device)\n","        outputs = base_model(inputs)\n","        _, preds = torch.max(outputs, 1)\n","\n","        # Append batch prediction results\n","        predlist=torch.cat([predlist,preds.view(-1).cpu()])\n","        pathlist.append(paths[0])\n","\n","preds = predlist.numpy() # predicted label"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch/utils/data/dataloader.py:490: UserWarning: This DataLoader will create 4 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  cpuset_checked))\n"]}]},{"cell_type":"code","metadata":{"id":"vXXoQQGqI5mY"},"source":["image_names = []\n","for path in pathlist:\n","  name = path.replace('test/', '')\n","  name = name[name.index('/')+1:]\n","  name = name[:name.index('.')]\n","  image_names.append(name)\n","\n","labels = []\n","for i in range(len(image_names)):\n","  labels.append(class_names[preds[i]]) "],"execution_count":null,"outputs":[]}]}
